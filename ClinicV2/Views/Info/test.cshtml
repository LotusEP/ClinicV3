@model ClinicV2.Models.SignupModel

@{
    ViewBag.Title = "SignUp";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



@using (Html.BeginForm("Signup","Info",FormMethod.Post))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Patient</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
       @Html.LabelFor(model => model.newPatient.FName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
           @Html.EditorFor(model => model.newPatient.FName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.newPatient.FName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.newPatient.LName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.newPatient.LName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.newPatient.LName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.newPatient.Street, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.newPatient.Street, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.newPatient.Street, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.newPatient.CellPhone, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.newPatient.CellPhone, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.newPatient.CellPhone, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.newPatient.City, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.newPatient.City, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.newPatient.City, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.newPatient.Zip, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.newPatient.Zip, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.newPatient.Zip, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.newPatient.State, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.newPatient.State, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.newPatient.State, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.newPatient.Email, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.newPatient.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.newPatient.Email, "", new { @class = "text-danger" })
        </div>
    </div>
    <div>
        Are you 18 years or older? <br>
        <input type="radio" name="age" value="Yes" checked> Yes<br>
        <input type="radio" name="age" value="No"> No<br>
    </div>


    <div class="form-group">


        @Html.LabelFor(model => model.newPatient.Income, htmlAttributes: new { @class = "control-label col-md-2" })

        <select id="Period">
            <option value="Weekly">Weekly</option>
            <option value="BikWeekly">Yearly</option>
            <option value="Monthly">Monthly</option>
            <option value="Yearly">Yearly</option>
        </select>

        <div class="col-md-10">
            @Html.EditorFor(model => model.newPatient.Income, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.newPatient.Income, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.newPatient.Household, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.newPatient.Household, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.newPatient.Household, "", new { @class = "text-danger" })
        </div>
    </div>
    <div>
        Do you have insurance? <br>
        <input type="radio" name="insurance" value="Yes" checked> Yes<br>
        <input type="radio" name="insurance" value="No"> No<br>
    </div>
    <div name="InsuranceInput">
        Insurance <input type="text" name="Insurance">
    </div>

    <div>
        @Html.Partial("_ClinicPartView", Model.listofClinic)
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}


<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script>
    var list = [];
    list = @Html.Raw(Json.Encode(Model.listofClinic));
    function Getnewlist() {


      //  alert('test');


       // alert(list[1].Req[0].Name);
    }

    function insurancecheck() {


    }
    function displayClinic() {

        var Income = parseInt(document.getElementById('newPatient_Income').value);
        var Household = parseInt(document.getElementById('newPatient_Household').value);
        var Period = document.getElementById('Period').value;
        var Requiredhouse = 0;

        switch(Period)
        {
            case "Weekly":
            Income = Income * 4;
            break;
            case "Biweekly":
                Income = Income * 2;
            break;
            case "Monthly":
                Income = Income;
            break;
            case "Yearly":
                Income = Income / 12;
            break;

        }
       // alert(Income);
       // alert(Household);

        var dis = null;
        var x = 0;

        for (x =0; x < list.length; x++) {
            var y = 0;
             // alert('pass1:' + x);
            for (y =0; y < list[x].Req.length; y++) {
                //  alert('pass2:' + y);
                if (list[x].Req[y].Name == ("Income")) {
                    //   alert('pass3');
                    var val = parseInt(list[x].Req[y].Value);
                    // alert(val + "Income For clinic");
                    // alert(Income);
                    var z, w = 0;
                    for (z = 0; z < list.length; z++) {
                     
                        for (w = 0; w < list[z].Req.length; w++) {
                            //alert(list[z].Req[w].Name);;
                            if (list[z].Req[w].Name == ("+IncomePerPerson"))
                                Requiredhouse = parseInt(list[z].Req[w].Value);
                            //alert("Income addition: " + Requiredhouse);
                        }
                    }

                    if (Household > 1) {
                        val = val + Requiredhouse;
                       // alert(val);
                    }
                    if (Income < val) {
                       // alert("yes");
                        // alert(typeof Income + "Type for income input");

                        //alert(typeof val + "Type of clinic income");
                        //   alert(typeof list[x].Req[y].Value);
                        // alert('pass4:' + Income + ": ClinicReq: " + list[x].Req[y].Value);
                        dis = document.getElementById(list[x].Name);
                        dis.style.display = "block";
                    }
                    else {
                        dis = document.getElementById(list[x].Name);
                        dis.style.display = "none";
                    }
                }
              
            }

        }



    }

</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
