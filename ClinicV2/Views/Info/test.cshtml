@model ClinicV2.Models.SignupModel

@{
    /**/


    ViewBag.Title = "SignUp";
    Layout = "~/Views/Shared/_Layout.cshtml";
    <link href="~/Content/Site.css" rel="stylesheet" type="text/css">
}

<style>

    .test {
        background-color: red;
    }

    .test2 {
        background-color: aqua;
    }
</style>

<script>

    var referrer = document.referrer;

    var changecounter = 0;
    //document.getElementById("listofInsurance").addEventListener("click", Getnewlist);
    var Requi = "check";
    var list = [];
    var Clinistodisplay = ["inital"];
    var ClinisNot = ["inital"];
    list = @Html.Raw(Json.Encode(Model.listofClinic));
    var criteria = ['No','No','No'];

    function ListCriteraCheck(Value) {
        //alert('Update');
        
        switch (Value) {

            case 0:
                    insurancecheck('Insurance');
                break;
            case 1:
                    IncomeCheck();
                break;
            case 2:
                    criteria[2] = criteriaVar;
                break;
            default:
        }

    }
    function Getnewlist(Question) {

        //if (Question == "Insurance") {
        //    var Requirement = document.getElementById("Insurancelist");

        //    Requirement.style.display = "";

        //}
        //else if (Question == "Income") {
        //    var Requirement = document.getElementById("PatientIncome");

        //    Requirement.style.display = "";
        //}
        //else if (Question == "IncomeNo") {
        //    var Requirement = document.getElementById("PatientIncome");

        //    Requirement.style.display = "None";
        //}


        switch (Question) {

            case "Insurance":
                var Requirement = document.getElementById("Insurancelist");
                Requirement.style.display = "";
                criteria[0] = "Yes"
                break;
            case "Income":
                var Requirement = document.getElementById("PatientIncome");
                Requirement.style.display = "";
                criteria[1] = "Yes"
                break;
            case "InsuranceNo":
                var Requirement = document.getElementById("Insurancelist");
                Requirement.style.display = "None";
                criteria[0] = "No"
                break;
            case "IncomeNo":
                var Requirement = document.getElementById("PatientIncome");
                Requirement.style.display = "None";
                criteria[1] = "No"
                break;




        }




       // alert(list[1].Req[0].Name);
    }
    function checkorder() {
        changecounter = 0;
        
        for (var y = 0; y < criteria.length; y++) {    
       
            if (criteria[y] == 'Yes') {
                changecounter++;
    
                ListCriteraCheck(y);
            }

        }

        displayclinic();
        
    }
    function displayclinic() {

        var displayClin = null;
        for (var dis = 0; dis < list.length; dis++) {
    
            displayClin = document.getElementById(list[dis].Name);
            displayClin.style.display = "None";

        }
        for (var dis = 1; dis < Clinistodisplay.length; dis++) {
     
            displayClin = document.getElementById(Clinistodisplay[dis]);
            displayClin.style.display = "";

        }


    }
    function updatingClinictoDisplay(Clinic,Action) {
        var checkCounter = 0;
        //alert(Action + ":Upating:" + Clinic)
        for (var clinicNum = 1; clinicNum < Clinistodisplay.length; clinicNum++) {
      
            if (Clinic == Clinistodisplay[clinicNum]) {
                checkCounter = clinicNum;
            }      
        }


        if (changecounter > 1 && checkCounter == 0)
        {
    
        }
        else if (Action == "ADD") {
            
            if (checkCounter == 0) {

                Clinistodisplay.push(Clinic);
            }
        }
        
        else if (Action == "REMOVE" ) {

            if (checkCounter > 0)
            {
                Clinistodisplay.splice(checkCounter, 1);
            }
         
        }

    }
    function insurancecheck(xas) {

        //var xas = 'Input_' + Requi;

        //alert('helloFirst');
        //alert(xas);
        if (xas == "Income") {
           // alert('hellsFrst');
            displayClinic()
        }
        else {
            if (xas == "Insurance") {

                var Requirement = document.getElementById("listofInsurance").value;

            }
            else {
                var Requirement = document.getElementById("Input_" + xas).value;
            }

            //alert(Requirement);
            var dis = null;
            var x = 0;

            //go through the clinics
            for (x = 0; x < list.length; x++) {
                var counter = 0;
                var y = 0;
                //dis = document.getElementById(list[x].Name);
                //dis.style.display = "none";
                //go through each clinic requirement
                for (y = 0; y < list[x].Req.length; y++) {
                    var clinicName = list[x].Name;

                    //check if the requirement match
                    if (list[x].Req[y].Name == xas) {
                        //alert("Yes1");
                        // is so check the value
                        var val = list[x].Req[y].Value;

                        if (Requirement == val) {
                         
                            updatingClinictoDisplay(list[x].Name, "ADD");
                            break;
                      
                        }
                        else {

                            updatingClinictoDisplay(list[x].Name, "REMOVE");
                            //dis = document.getElementById(list[x].Name);
                            //dis.style.display = "none";
                        }
                    }

                }


                //reduncy removing
                //var temp;
                //if (counter == 0) {

                //    for (q = 0; q < Clinistodisplay.length; q++) {
                //   // alert(Clinistodisplay[q] + ";" + clinicName);

                //        if (clinicName == Clinistodisplay[q]) {

                //            Clinistodisplay.splice(q ,1);
                //            q = 0;

                //        }

                //    }
                //}

            }

        }
        //reduncy removing
            // for (x = 1; x < Clinistodisplay.length; x++)
            // {
            //     dis = document.getElementById(Clinistodisplay[x]);
            //     dis.style.display = "";
            //}


    }
    function IncomeCheck() {
        //alert("JI");
        var Income = parseInt(document.getElementById('newPatient_Income').value);
        var Household = parseInt(document.getElementById('newPatient_Household').value);
        var Period = document.getElementById('Period').value;
        var Requiredhouse = 0;
        var val;
        var noMatch = false;
  
      //  alert(Period);
        switch(Period)
        {
            case "Weekly":
            Income = Income * 4;
            break;
            case "Biweekly":
                Income = Income * 2;
            break;
            case "Monthly":
                Income = Income;
            break;
            case "Yearly":
                Income = Income / 12;
            break;

        }
       //alert(Income);
       // alert(Household);
        var dis = null;
        var x = 0;
        //go through the clinics

        for (x = 0; x < list.length; x++) {
            //dis = document.getElementById(list[x].Name);
            //dis.style.display = "none";
            var y = 0;
           //  alert('pass1:' + x);
            //go through each clinic requirement

            for (y =0; y < list[x].Req.length; y++) {
                //  alert('pass2:' + y);
                //check if the requirement is income
                if (list[x].Req[y].Name == ("Income")) {
                    noMatch = true;
                    //   alert('pass3');
                    // get that income requirement value
                    val = parseInt(list[x].Req[y].Value);
                    // alert(val + "Income For clinic");
                    // alert(Income);
                    var z, w = 0;
                    //get the addition income per household value
       
                    for (z = 0; z < list.length; z++) {

                        for (w = 0; w < list[z].Req.length; w++) {
                            //alert(list[z].Req[w].Name);;
                            if (list[z].Req[w].Name == ("+IncomePerPerson")) {

                                Requiredhouse = parseInt(list[z].Req[w].Value);
                            }
                            else {
                                Requiredhouse =  @Html.Raw(Json.Encode(Model.GuidelineValue));
                            }                              
                            //  alert("Income addition: " + Requiredhouse);
                        }
                    }
       
                    //increase the total income value
                    if (Household > 1) {
                        for (var housesize = 1; housesize < Household; housesize++)
                        {
                            val = val + Requiredhouse;
                        }

                    }                 
                    if (Income <= val) {

                        //alert('Patient Income:' + Income);
                        //alert('the requirement amount:' + val)
                        // alert("yes");
                        // alert(typeof Income + "Type for income input");

                        //alert(typeof val + "Type of clinic income");
                        //   alert(typeof list[x].Req[y].Value);
                        // alert('pass4:' + Income + ": ClinicReq: " + list[x].Req[y].Value);
                        //alert("add new clinic");
                        updatingClinictoDisplay(list[x].Name,"ADD");
                        //dis = document.getElementById(list[x].Name);
                        //dis.style.display = "";
                    }
                    else {
                        alert(list[x].Name);
                        updatingClinictoDisplay(list[x].Name, "REMOVE");

                        //dis = document.getElementById(list[x].Name);
                        //dis.style.display = "none";
                    } 
                }
                else {

                    noMatch = false;

                }
            }
        }


    }
    
</script>

@using (Html.BeginForm("Signup", "Info", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <h4>Patient</h4>
    <hr>
    <div>
        <div class="col-md-3">
            Do you have insurance? <br>
            <input type="radio" name="insurance" value="Yes" onclick="Getnewlist('Insurance')" checked> Yes<br>
            <input type="radio" name="insurance" value="No" onclick="Getnewlist('InsuranceNo')" checked="checked"> No<br>
            <div class="col-md-10" id="Insurancelist" style="display:none">
                <label class="control-label"> Insurance</label>
                @*@Html.DropDownListFor(model => model.listofInsurance, new SelectList(Model.listofInsurance), "Select Insurance", new { @class = "from-control ", @onchange = "insurancecheck('Insurance')" })*@
                  @Html.DropDownListFor(model => model.listofInsurance, new SelectList(Model.listofInsurance), "Select Insurance", new { @class = "from-control ", @onchange = "checkorder()" })
            </div>
        </div>

        <div class="col-md-5">
            <div class="col-md-4">
                Do you have an income? <br />
                <input type="radio" name="Income" value="Yes" onclick="Getnewlist('Income')" checked> Yes<br>
                <input type="radio" name="Income" value="No" onclick="Getnewlist('IncomeNo')" checked="checked"> No<br>


                
                <div id="PatientIncome" style="display:none">
                    <hr />
                Paid Period:
                    <select id="Period" class=" form-control col-md-3" onchange="checkorder()">
                        <option value="Weekly">Weekly</option>
                        <option value="BikWeekly">Yearly</option>
                        <option value="Monthly">Monthly</option>
                        <option value="Yearly">Yearly</option>
                    </select>

            
                Household size:
                @Html.EditorFor(model => model.newPatient.Household, new { htmlAttributes = new { @class = "form-control", @onchange = "checkorder()" } })
                @Html.ValidationMessageFor(model => model.newPatient.Household, "", new { @class = "text-danger" })
      
                Income:
                @Html.EditorFor(model => model.newPatient.Income, new { htmlAttributes = new { @class = "form-control", placeholder = "$0.00" , @onchange = "checkorder()" } })
                @Html.ValidationMessageFor(model => model.newPatient.Income, "", new { @class = "text-danger" })
                </div>
              
            </div>
        </div>


    </div>


   

    <div class="col-md-12  ">
        <div>
            @Html.Partial("_ClinicPartView", Model.listofClinic)

        </div>
    </div>



    <div class="row">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="col-md-5 ">
            @*@Html.LabelFor(model => model.newPatient.FName, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-6">
                <label class="control-label"> First Name</label>
                @Html.EditorFor(model => model.newPatient.FName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.newPatient.FName, "", new { @class = "text-danger" })
            </div>

            @*@Html.LabelFor(model => model.newPatient.LName, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-5">
                <label class="control-label"> Last Name</label>
                @Html.EditorFor(model => model.newPatient.LName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.newPatient.LName, "", new { @class = "text-danger" })
            </div>



            <div class="col-md-10">
                @Html.LabelFor(model => model.newPatient.Street, htmlAttributes: new { @class = "control-label " })
                @Html.EditorFor(model => model.newPatient.Street, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.newPatient.Street, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-4">
                @Html.LabelFor(model => model.newPatient.City, htmlAttributes: new { @class = "control-label " })
                @Html.EditorFor(model => model.newPatient.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.newPatient.City, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-2">
                @Html.LabelFor(model => model.newPatient.Zip, htmlAttributes: new { @class = "control-label " })
                @Html.EditorFor(model => model.newPatient.Zip, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.newPatient.Zip, "", new { @class = "text-danger" })
            </div>


            <div class="col-md-8">
                @Html.LabelFor(model => model.newPatient.State, htmlAttributes: new { @class = "control-label" })
                <br />
                @Html.DropDownListFor(model => model.newPatient.State, new List<SelectListItem> {

                    new SelectListItem {Text = "Alabama", Value = "AL"},
                    new SelectListItem {Text = "Alaska", Value = "AK"},
                    new SelectListItem {Text = "Arizona", Value = "AZ"},
                    new SelectListItem {Text = "Arkansas", Value = "AR"},
                    new SelectListItem {Text = "California", Value = "CA"},
                    new SelectListItem {Text = "Colorado", Value = "CO"},
                    new SelectListItem {Text = "Connecticut", Value = "CT"},
                    new SelectListItem {Text = "District of Columbia", Value = "DC"},
                    new SelectListItem {Text = "Delaware", Value = "DE"},
                    new SelectListItem {Text = "Florida", Value = "FL"},
                    new SelectListItem {Text = "Georgia", Value = "GA"},
                    new SelectListItem {Text = "Hawaii", Value = "HI"},
                    new SelectListItem {Text = "Idaho", Value = "ID"},
                    new SelectListItem {Text = "Illinois", Value = "IL"},
                    new SelectListItem {Text = "Indiana", Value = "IN"},
                    new SelectListItem {Text = "Iowa", Value = "IA"},
                    new SelectListItem {Text = "Kansas", Value = "KS"},
                    new SelectListItem {Text = "Kentucky", Value = "KY"},
                    new SelectListItem {Text = "Louisiana", Value = "LA"},
                    new SelectListItem {Text = "Maine", Value = "ME"},
                    new SelectListItem {Text = "Maryland", Value = "MD"},
                    new SelectListItem {Text = "Massachusetts", Value = "MA"},
                    new SelectListItem {Text = "Michigan", Value = "MI"},
                    new SelectListItem {Text = "Minnesota", Value = "MN"},
                    new SelectListItem {Text = "Mississippi", Value = "MS"},
                    new SelectListItem {Text = "Missouri", Value = "MO"},
                    new SelectListItem {Text = "Montana", Value = "MT"},
                    new SelectListItem {Text = "Nebraska", Value = "NE"},
                    new SelectListItem {Text = "Nevada", Value = "NV"},
                    new SelectListItem {Text = "New Hampshire", Value = "NH"},
                    new SelectListItem {Text = "New Jersey", Value = "NJ"},
                    new SelectListItem {Text = "New Mexico", Value = "NM"},
                    new SelectListItem {Text = "New York", Value = "NY"},
                    new SelectListItem {Text = "North Carolina", Value = "NC"},
                    new SelectListItem {Text = "North Dakota", Value = "ND"},
                    new SelectListItem {Text = "Ohio", Value = "OH"},
                    new SelectListItem {Text = "Oklahoma", Value = "OK"},
                    new SelectListItem {Text = "Oregon", Value = "OR"},
                    new SelectListItem {Text = "Pennsylvania", Value = "PA"},
                    new SelectListItem {Text = "Rhode Island", Value = "RI"},
                    new SelectListItem {Text = "South Carolina", Value = "SC"},
                    new SelectListItem {Text = "South Dakota", Value = "SD"},
                    new SelectListItem {Text = "Tennessee", Value = "TN"},
                    new SelectListItem {Text = "Texas", Value = "TX"},
                    new SelectListItem {Text = "Utah", Value = "UT"},
                    new SelectListItem {Text = "Vermont", Value = "VT"},
                    new SelectListItem {Text = "Virginia", Value = "VA"},
                    new SelectListItem {Text = "Washington", Value = "WA"},
                    new SelectListItem {Text = "West Virginia", Value = "WV"},
                    new SelectListItem {Text = "Wisconsin", Value = "WI"},
                    new SelectListItem {Text = "Wyoming", Value = "WY"}



                }, "Select State", new { @class = "from-control " })
                @Html.ValidationMessageFor(model => model.newPatient.State, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.newPatient.CellPhone, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.newPatient.CellPhone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.newPatient.CellPhone, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-10">
                @Html.LabelFor(model => model.newPatient.Email, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.newPatient.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.newPatient.Email, "", new { @class = "text-danger" })
            </div>





          


            @foreach (var item in Model.listofCriteria)
            {
                <div class="col-md-8">

                    <input type="checkbox" id="@item.Name" onclick="insurancecheck('@item.Name')" />@item.Name
                </div>


                @*if (item.Name == "Housing" | item.Name == "Income")
                    {


                    }
                    else
                    {
                        <div name="@item.Name">
                            <input type="text" id="Input_@item.Name" name="Insurance">
                        </div>
                    }*@

            }




        </div>


        <div class="form-group col-md-12 col-md-push-2  ">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}
@* ------------------------------------------------------------------------------------------------------------- *@


<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
